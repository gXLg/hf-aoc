<= lib:io/readall

^1 <= ^0

^0 <=
^0 => 1 <= ','
^0 => 2 <= ^1
<= lib:str/split

#1 <= ^0 => 1
#2 <= #1
#3 <=
^1 <=

!1
  ^1 => #3 <= ^0 => (#3 + 3)
  #3 <= #3 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !1

:: amount of strings in #2

:: converting to numbers
#5 <=
#1 <= #2
!2
  ^0 <= ^1 => #5
  <= lib:math/froms
  ^1 => #5 <= ^0 => 1

  #5 <= #5 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !2

:: getting min max
#8 <= ^1 => 0
#9 <= ^1 => 0
#5 <=
#1 <= #2
!3

  ^0 <=
  ^0 => 1 <= #8 + 1
  ^0 => 2 <= (^1 => #5) + 1
  <= lib:math/geqnat
  #7 <= ^0 => 1
  #8 <= #8 * (1 - #7) + (^1 => #5) * #7

  ^0 <=
  ^0 => 1 <= #9 + 1
  ^0 => 2 <= (^1 => #5) + 1
  <= lib:math/geqnat
  #7 <= ^0 => 1
  #9 <= #9 * #7 + (^1 => #5) * (1 - #7)

  #5 <= #5 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !3

:: setup count
^2 <=
#5 <=
#1 <= #9 - #8 + 1
!4

  ^2 => #5 <= 0

  #5 <= #5 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !4


:: count values
#5 <=
#1 <= #2
!5

  #6 <= ^2 => (^1 => #5)
  ^2 => (^1 => #5) <= #6 + 1

  #5 <= #5 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !5

:: middle:
#6 <= #2 / 2 + (#2 - #2 / 2 * 2)

#7 <=

:: while count < middle: add count
:: end: return current index
#5 <=
!6

  #7 <= #7 + (^2 => #5)

  ^0 <=
  ^0 => 1 <= #7 + 1
  ^0 => 2 <= #6 + 1
  <= lib:math/geqnat
  #0 <= #0 + (^0 => 1) * 2
  :: if not reached
    #5 <= #5 + 1
    #0 <= !6

:: count difference
#6 <=
#7 <= #5
#5 <=
#1 <= #2
!7

  #8 <= (^1 => #5) - #7
  ^0 <=
  ^0 => 1 <= #8
  <= lib:math/isneg
  #0 <= #0 + ^0 => 1
  :: if positive
    #8 <= - #8
  #8 <= - #8

  #6 <= #6 + #8

  #5 <= #5 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !7

^0 <=
^0 => 1 <= #6
<= lib:io/putnat
&1 <= '\n'
