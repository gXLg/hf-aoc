<= lib:io/readall

^1 <= ^0

^0 <=
^0 => 1 <= '\n'
^0 => 2 <= ^1
<= lib:str/split

#1 <= ^0 => 1
#2 <= #1
#3 <=
^1 <=

!1
  ^1 => #3 <= ^0 => (#3 + 3)
  #3 <= #3 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !1
:: amount of strings is in #2

^0 <= "begin parsing\n"
<= lib:io/puts


&1 <= 'l'
^0 <=
^0 => 1 <= #2
<= lib:io/putnat
&1 <= '\n'


:: split the digits
^2 <=
^9 <=
#1 <= #2
#3 <=
!2
  ^0 <=
  ^0 => 1 <= '|'
  ^0 => 2 <= ^1 => #3
  <= lib:str/split
  ^3 <= ^0 => 3
  ^4 <= ^0 => 4

  ^2 => #3 <=

  ^0 <=
  ^0 => 1 <= ^3
  ^0 => 2 <= 0
  ^0 => 3 <= 1
  <= lib:str/slice
  ^3 <= ^0
  ^0 <=
  ^0 => 1 <= ' '
  ^0 => 2 <= ^3
  <= lib:str/split
  ^3 <=
  ^3 => 0 <= ^0 => 3
  ^3 => 1 <= ^0 => 4
  ^3 => 2 <= ^0 => 5
  ^3 => 3 <= ^0 => 6
  ^3 => 4 <= ^0 => 7
  ^3 => 5 <= ^0 => 8
  ^3 => 6 <= ^0 => 9
  ^3 => 7 <= ^0 => 10
  ^3 => 8 <= ^0 => 11
  ^3 => 9 <= ^0 => 12

  ^0 <=
  ^0 => 1 <= ^4
  ^0 => 2 <= 1
  ^0 => 3 <= 0
  <= lib:str/slice
  ^4 <= ^0
  ^0 <=
  ^0 => 1 <= ' '
  ^0 => 2 <= ^4
  <= lib:str/split
  ^4 <=
  ^4 => 0 <= ^0 => 3
  ^4 => 1 <= ^0 => 4
  ^4 => 2 <= ^0 => 5
  ^4 => 3 <= ^0 => 6

  ^9 => #3 <=
  ^9 => #3 => 0 <= ^3
  ^9 => #3 => 1 <= ^4

  &1 <= '+'
  ^0 <=
  ^0 => 1 <= #3
  <= lib:io/putnat
  &1 <= '\n'

  #1 <= #1 - 1
  #3 <= #3 + 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !2

:: clock map
::  a  a
:: b    c
:: b    c
::  d  d
:: e    f
:: e    f
::  g  g
:: a = 1,  b = 2,  c = 4, d = 8,
:: e = 16, f = 32, g = 64
^30 <=
^30 => 119 <= 0
^30 => 36  <= 1
^30 => 93  <= 2
^30 => 109 <= 3
^30 => 46  <= 4
^30 => 107 <= 5
^30 => 123 <= 6
^30 => 37  <= 7
^30 => 127 <= 8
^30 => 111 <= 9

#69 <=

:: walking over all lines
:: why do I have to do this? TwT
#1 <= #2
#3 <=
!3

  :: digits mapping in perfect
  ^8 <=
  ^8 => 'a' <= 1
  ^8 => 'b' <= 2
  ^8 => 'c' <= 4
  ^8 => 'd' <= 8
  ^8 => 'e' <= 16
  ^8 => 'f' <= 32
  ^8 => 'g' <= 64

  :: this case mapping
  ^10 <=

  :: unique numbers
  ^4 <= ^9 => #3 => 0

  :: special cases
  ^11 <=
  ^44 <=
  ^77 <=
  ^88 <=

  :: other cases
  :: (length 6)
  ^609 <=
  ^609 => 0 <=
  ^609 => 1 <=
  ^609 => 2 <=
  #609 <=
  :: (length 5)
  ^253 <=
  ^253 => 0 <=
  ^253 => 1 <=
  ^253 => 2 <=
  #253 <=

  :: walking over all the digits
  #4 <= 10
  #5 <=
  !4

    ^3 <= ^4 => #5

    :: getting length of this one
    #6 <= -1
    !5
      #6 <= #6 + 1
      #7 <= ^3 => #6
      #0 <= #0 + (1 - #7 / #7)
      #0 <= !5

    #0 <= !(50 + #6)

    :: 50 + length, big brain
    !52
      ^11 <= ^3
      #0 <= !50

    !53
      ^77 <= ^3
      #0 <= !50

    !54
      ^44 <= ^3
      #0 <= !50

    !55
      ^253 => #253 <= ^3
      #253 <= #253 + 1
      #0 <= !50

    !56
      ^609 => #609 <= ^3
      #609 <= #609 + 1
      #0 <= !50

    !57
      ^88 <= ^3
      #0 <= !50

    !50

    #4 <= #4 - 1
    #5 <= #5 + 1
    #0 <= #0 + (1 - #4 / #4)
    #0 <= !4

  :: first, up-stick
  <= base:help/a

  :: then, right-low
  <= base:help/f

  :: right-up
  <= base:help/c

  :: left-up
  <= base:help/b

  :: mid
  <= base:help/d

  :: down
  <= base:help/g

  :: left-low
  <= base:help/e


  :: searched digits
  ^4 <= ^9 => #3 => 1


  :: start summing the result
  #60 <=
  ^3 <= ^4 => 0
  #6 <=
  !60
    #7 <= ^3 => #6
    #60 <= #60 + (^10 => #7)
    #6 <= #6 + 1
    #7 <= ^3 => #6
    #0 <= #0 + (1 - #7 / #7)
    #0 <= !60
  #60 <= ^30 => #60

  #61 <=
  ^3 <= ^4 => 1
  #6 <=
  !61
    #7 <= ^3 => #6
    #61 <= #61 + (^10 => #7)
    #6 <= #6 + 1
    #7 <= ^3 => #6
    #0 <= #0 + (1 - #7 / #7)
    #0 <= !61
  #61 <= ^30 => #61

  #62 <=
  ^3 <= ^4 => 2
  #6 <=
  !62
    #7 <= ^3 => #6
    #62 <= #62 + (^10 => #7)
    #6 <= #6 + 1
    #7 <= ^3 => #6
    #0 <= #0 + (1 - #7 / #7)
    #0 <= !62
  #62 <= ^30 => #62

  #63 <=
  ^3 <= ^4 => 3
  #6 <=
  !63
    #7 <= ^3 => #6
    #63 <= #63 + (^10 => #7)
    #6 <= #6 + 1
    #7 <= ^3 => #6
    #0 <= #0 + (1 - #7 / #7)
    #0 <= !63
  #63 <= ^30 => #63

  #69 <= #69 + #60 * 1000 + #61 * 100 + #62 * 10 + #63

  #1 <= #1 - 1
  #3 <= #3 + 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !3


^0 <=
^0 => 1 <= #69
<= lib:io/putnat
&1 <= '\n'
