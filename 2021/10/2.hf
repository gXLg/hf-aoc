<= lib:io/readall

^1 <= ^0

^0 <=
^0 => 1 <= 10
^0 => 2 <= ^1
<= lib:str/split

#1 <= ^0 => 1
#2 <= #1
#3 <=
^1 <=

!1
  ^1 => #3 <= ^0 => (#3 + 3)
  #3 <= #3 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !1

:: amount of strings
#1 <= #2

:: :: map of complete codes
:: ^2 <=
:: ^2 => ')' <= 1
:: ^2 => ']' <= 2
:: ^2 => '}' <= 3
:: ^2 => '>' <= 4

^69 <=
#69 <=

^61 <=
#61 <=

#1 <= #2
#4 <=
!2

  :: current chunks
  ^3 <=
  #3 <=

  #5 <=
  !3

    #7 <= ^1 => #4 => #5
    #8 <= #7 - '('
    #0 <= #0 + (#8 / #8) * 3
      ^3 => #3 <= 1
      #3 <= #3 + 1
      #0 <= !30

    #8 <= #7 - '['
    #0 <= #0 + (#8 / #8) * 3
      ^3 => #3 <= 2
      #3 <= #3 + 1
      #0 <= !30

    #8 <= #7 - '{'
    #0 <= #0 + (#8 / #8) * 3
      ^3 => #3 <= 3
      #3 <= #3 + 1
      #0 <= !30

    #8 <= #7 - '<'
    #0 <= #0 + (#8 / #8) * 3
      ^3 => #3 <= 4
      #3 <= #3 + 1
      #0 <= !30


    #8 <= #7 - ')'
    #0 <= #0 + (#8 / #8) * 6
      #9 <= ^3 => (#3 - 1) - 1
      #0 <= #0 + (1 - #9 / #9)
        #0 <= !31
      ^3 => (#3 - 1) <= 0
      #3 <= #3 - 1
      #0 <= !30

    #8 <= #7 - ']'
    #0 <= #0 + (#8 / #8) * 6
      #9 <= ^3 => (#3 - 1) - 2
      #0 <= #0 + (1 - #9 / #9)
        #0 <= !31
      ^3 => (#3 - 1) <= 0
      #3 <= #3 - 1
      #0 <= !30

    #8 <= #7 - '}'
    #0 <= #0 + (#8 / #8) * 6
      #9 <= ^3 => (#3 - 1) - 3
      #0 <= #0 + (1 - #9 / #9)
        #0 <= !31
      ^3 => (#3 - 1) <= 0
      #3 <= #3 - 1
      #0 <= !30

    #8 <= #7 - '>'
    #0 <= #0 + (#8 / #8) * 6
      #9 <= ^3 => (#3 - 1) - 4
      #0 <= #0 + (1 - #9 / #9)
        #0 <= !31
      ^3 => (#3 - 1) <= 0
      #3 <= #3 - 1
      #0 <= !30

    !30
    #5 <= #5 + 1
    #7 <= ^1 => #4 => #5
    #0 <= #0 + (1 - #7 / #7)
    #0 <= !3

  :: nothing wrong
  #60 <=
  !4
    #60 <= #60 * 5 + (^3 => (#3 - 1))
    #3 <= #3 - 1
    #0 <= #0 + (1 - #3 / #3)
    #0 <= !4

  ^0 <=
  ^0 => 1 <= #60
  <= lib:io/putnat
  &1 <= '\n'

  ^61 => #61 <= #60
  #61 <= #61 + 1

  !31

  #4 <= #4 + 1
  #1 <= #1 - 1
  #0 <= #0 + (1 - #1 / #1)
  #0 <= !2

:: how often to sort out the max
#62 <= #61 / 2 + 1
!62

  #50 <=
  :: adding all the new values
  ^63 <=
  #63 <=
  #2 <=
  #1 <= #61
  !63
    ^0 <=
    ^0 => 1 <= ^61 => #2
    ^0 => 2 <= #50 + 1
    <= lib:math/geqnat
    #0 <= !(601 + ^0 => 1)

    !601
      ^63 => #63 <= ^61 => #2
      #63 <= #63 + 1
      #0 <= !603

    !602
      ^63 => #63 <= #50
      #63 <= #63 + 1
      #50 <= ^61 => #2

    !603

    #2 <= #2 + 1
    #1 <= #1 - 1
    #0 <= #0 + (1 - #1 / #1)
    #0 <= !63

  ^61 <= ^63
  #61 <= #63

  #62 <= #62 - 1
  #0 <= #0 + (1 - #62 / #62)
  #0 <= !62


^0 <=
^0 => 1 <= #50
<= lib:io/putnat
